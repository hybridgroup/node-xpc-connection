language: objective-c

env:
  matrix:
    - export NODE_VERSION="0.10"
  global:
    - secure: "buPcM9UEdWA6TVCTRImKGVNQ7Un7/hAOBu/sgwkuQw6Uz6D6b4l86AznmxqKrJ0y8R0IUlHAFII5AOB9yOcE5JqWwoscNqS4do+mSCPGJ6oeJ6b//eQxUTPQ5tIVqzp+0d8ZrOGJ4KNVKLyTiezTjpo+mCnP7rRunDo0a+jLMuc="
    - secure: "KIXN/qm9hZ9DXzpquHFE4DzTuq/zcavmKzk51CmZSIUxKw6Kek3qW18367P/JV1X51WpnHmzYx3BCXv8A5RwUPUcpDN+U/VzTSkEiU3q7vQrsQq3SYibLbvcTmpcl8uEpdGXBZBpEkNUfP2Dx2OE3UbF0oQnuN75nzsZ+n06PMM="

before_install:
  - git clone https://github.com/creationix/nvm.git ./.nvm
  - source ./.nvm/nvm.sh
  - nvm install $NODE_VERSION
  - nvm use $NODE_VERSION
  # get commit message
  - COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
  # put local node-pre-gyp on PATH
  - export PATH=./node_modules/.bin/:$PATH
  # put global node-gyp on PATH
  - npm install node-gyp -g
  # install aws-sdk so it is available for publishing
  - npm install aws-sdk
  # figure out if we should publish
  - PUBLISH_BINARY=false
  # if we are building a tag then publish
  - if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
  # or if we put [publish binary] in the commit message
  - if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH_BINARY=true; fi;
  - platform=$(uname -s | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/")

install:
  # ensure source install works
  - npm install --build-from-source
  # test our module
  #- node gamepad

before_script:
  - echo "Publishing native platform Binary Package? ->" $PUBLISH_BINARY
  # if publishing, do it
  - if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package publish; fi;
  # cleanup
  - node-pre-gyp clean
  - node-gyp clean

script:
  # if publishing, test installing from remote
  - INSTALL_RESULT=0
  - if [[ $PUBLISH_BINARY == true ]]; then INSTALL_RESULT=$(npm install --fallback-to-build=false > /dev/null)$? || true; fi;
  # if install returned non zero (errored) then we first unpublish and then call false so travis will bail at this line
  #- if [[ $INSTALL_RESULT != 0 ]]; then echo "returned $INSTALL_RESULT";node-pre-gyp unpublish;false; fi
  # If success then we arrive here so lets clean up
  - node-pre-gyp clean
  # node v0.8 and above provide pre-built 32 bit and 64 bit binaries
  # so here we use the 32 bit ones to also test 32 bit builds
  # - NVER=`node -v`
  # - wget http://nodejs.org/dist/${NVER}/node-${NVER}-${platform}-x86.tar.gz
  # - tar xf node-${NVER}-${platform}-x86.tar.gz
  # enable 32 bit node
  # - export PATH=$(pwd)/node-${NVER}-${platform}-x86/bin:$PATH
  # install 32 bit compiler toolchain and X11
  # - if [[ "$platform" == 'linux' ]]; then sudo apt-get -y install gcc-multilib g++-multilib; fi
  # test source compile in 32 bit mode with internal libsqlite3
  # - if [[ "$platform" == 'linux' ]]; then CC=gcc-4.6 CXX=g++-4.6 npm install --build-from-source; else npm install --build-from-source; fi
  #- node gamepad
  # publish 32 bit build
  # - echo "Publishing x86 32bit Binary Package? ->" $PUBLISH_BINARY
  # - if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package publish; fi;

after_success:
  # if success then query and display all published binaries
  - node-pre-gyp info
